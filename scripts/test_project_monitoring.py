#!/usr/bin/env python3
"""
Script de test pour v√©rifier le syst√®me de monitoring des projets
"""
import asyncio
import sys
import os
from datetime import datetime, timedelta, timezone

# Ajouter le r√©pertoire app au path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'app'))

from db import AsyncSessionLocal
from models import Project, Team, User, TeamSubscription, Domain
from services.project_monitoring import ProjectMonitoringService
from services.pricing import PricingService


async def test_project_monitoring():
    """Test complet du syst√®me de monitoring"""
    async with AsyncSessionLocal() as db:
        try:
            print("üß™ Test du syst√®me de monitoring des projets")
            print("=" * 50)
            
            # 1. Cr√©er un plan gratuit
            print("1. Cr√©ation du plan gratuit...")
            free_plan = await PricingService.get_default_free_plan(db)
            print(f"   ‚úÖ Plan gratuit cr√©√©: {free_plan.name}")
            
            # 2. Cr√©er un utilisateur et une √©quipe
            print("2. Cr√©ation de l'utilisateur et de l'√©quipe...")
            user = User(
                email="test@example.com",
                username="testuser",
                email_verified=True,
                status="active"
            )
            db.add(user)
            await db.commit()
            await db.refresh(user)
            
            team = Team(
                name="Test Team",
                created_by_user_id=user.id,
                status="active"
            )
            db.add(team)
            await db.commit()
            await db.refresh(team)
            
            # Assigner le plan gratuit
            subscription = TeamSubscription(
                team_id=team.id,
                plan_id=free_plan.id,
                status="active"
            )
            db.add(subscription)
            await db.commit()
            
            print(f"   ‚úÖ Utilisateur et √©quipe cr√©√©s: {team.name}")
            
            # 3. Cr√©er un projet inactif
            print("3. Cr√©ation d'un projet inactif...")
            six_days_ago = datetime.now(timezone.utc) - timedelta(days=6)
            project = Project(
                name="Test Project Inactif",
                repo_id=12345,
                repo_full_name="test/inactive-repo",
                github_installation_id=1,
                team_id=team.id,
                status="active",
                last_traffic_at=six_days_ago
            )
            db.add(project)
            await db.commit()
            await db.refresh(project)
            
            # Cr√©er un domaine pour le projet
            domain = Domain(
                project_id=project.id,
                hostname="test-inactive.example.com",
                type="route",
                status="active"
            )
            db.add(domain)
            await db.commit()
            
            print(f"   ‚úÖ Projet cr√©√©: {project.name} (inactif depuis 6 jours)")
            
            # 4. Tester la d√©sactivation automatique
            print("4. Test de la d√©sactivation automatique...")
            await ProjectMonitoringService.check_inactive_projects(db)
            
            await db.refresh(project)
            if project.status == "inactive":
                print("   ‚úÖ Projet d√©sactiv√© automatiquement")
            else:
                print("   ‚ùå Projet non d√©sactiv√©")
                return False
            
            # 5. Tester la r√©activation
            print("5. Test de la r√©activation...")
            success = await ProjectMonitoringService.reactivate_project(project, db)
            
            await db.refresh(project)
            await db.refresh(domain)
            
            if success and project.status == "active" and domain.status == "active":
                print("   ‚úÖ Projet r√©activ√© avec succ√®s")
            else:
                print("   ‚ùå √âchec de la r√©activation")
                return False
            
            # 6. Tester l'enregistrement du trafic
            print("6. Test de l'enregistrement du trafic...")
            await ProjectMonitoringService.record_traffic(project, db)
            
            await db.refresh(project)
            if project.last_traffic_at is not None:
                print("   ‚úÖ Trafic enregistr√© avec succ√®s")
            else:
                print("   ‚ùå √âchec de l'enregistrement du trafic")
                return False
            
            # 7. Tester la d√©sactivation permanente
            print("7. Test de la d√©sactivation permanente...")
            # Simuler un projet inactif depuis 8 jours
            eight_days_ago = datetime.now(timezone.utc) - timedelta(days=8)
            project.status = "inactive"
            project.deactivated_at = eight_days_ago
            await db.commit()
            
            await ProjectMonitoringService.check_permanently_disabled_projects(db)
            
            await db.refresh(project)
            if project.status == "permanently_disabled":
                print("   ‚úÖ Projet d√©sactiv√© d√©finitivement")
            else:
                print("   ‚ùå Projet non d√©sactiv√© d√©finitivement")
                return False
            
            # 8. Tester que la r√©activation est impossible
            print("8. Test de l'impossibilit√© de r√©activation...")
            success = await ProjectMonitoringService.reactivate_project(project, db)
            
            if not success:
                print("   ‚úÖ R√©activation correctement bloqu√©e")
            else:
                print("   ‚ùå R√©activation autoris√©e √† tort")
                return False
            
            print("\nüéâ Tous les tests sont pass√©s avec succ√®s!")
            return True
            
        except Exception as e:
            print(f"\n‚ùå Erreur lors des tests: {e}")
            await db.rollback()
            return False


async def cleanup_test_data():
    """Nettoie les donn√©es de test"""
    async with AsyncSessionLocal() as db:
        try:
            # Supprimer les projets de test
            await db.execute(
                "DELETE FROM project WHERE name LIKE 'Test Project%'"
            )
            
            # Supprimer les √©quipes de test
            await db.execute(
                "DELETE FROM team WHERE name = 'Test Team'"
            )
            
            # Supprimer les utilisateurs de test
            await db.execute(
                "DELETE FROM user WHERE email = 'test@example.com'"
            )
            
            await db.commit()
            print("üßπ Donn√©es de test nettoy√©es")
            
        except Exception as e:
            print(f"Erreur lors du nettoyage: {e}")
            await db.rollback()


if __name__ == "__main__":
    print("üöÄ D√©marrage des tests de monitoring des projets")
    
    # Ex√©cuter les tests
    success = asyncio.run(test_project_monitoring())
    
    if success:
        # Nettoyer les donn√©es de test
        asyncio.run(cleanup_test_data())
        print("\n‚úÖ Tests termin√©s avec succ√®s!")
        sys.exit(0)
    else:
        print("\n‚ùå Tests √©chou√©s!")
        sys.exit(1)
